Spring Framework - Dependency Injection (DI):

Dependency Injection Overview: Spring Framework offers a core feature called Dependency Injection (DI), which allows the framework to manage the creation, configuration, and lifecycle of objects (beans). Instead of the programmer manually creating objects using the new keyword and managing their lifecycle, Spring takes care of this, reducing boilerplate code and improving modularity.

Spring Container: When an application is run, Spring creates a Spring Container (often referred to as ApplicationContext). This container is responsible for managing beans (objects), ensuring they are created and wired together based on configuration, whether via annotations, XML, or Java-based configuration.

Using @Component Annotation: To inform Spring that it should manage an object, you can annotate the class with @Component. This tells Spring to automatically create and manage the object, making it available in the application context.

Getting Beans from the Container: Once the Spring container is initialized, you can retrieve beans using ApplicationContext. For example:
ProductService productService = context.getBean(ProductService.class);
Here, context.getBean() fetches the ProductService object that Spring has already created and managed.


Spring Data JPA - Simplified Database Interaction:

Creating Database Interaction Layer: In Spring, instead of manually creating classes to manage database queries, you can use Spring Data JPA to simplify this process.

Interface Instead of Class: Instead of creating a traditional class for database operations, you create an interface. This interface will extend JpaRepository, which provides a powerful abstraction for database operations.

Defining the Repository Interface:
public interface ProductRepository extends JpaRepository<Product, Integer> {
    // No additional code required
}
Product: The entity class that this repository will manage.
Integer: The data type of the entity's primary key.

Automatic Method Implementation: By extending JpaRepository, you gain access to various CRUD operations like findAll(), save(), deleteById(), etc., without writing any SQL queries. Spring Data JPA automatically provides the implementation.

Using the Repository:
@Autowired
private ProductRepository productRepository;
// Example usage
List<Product> products = productRepository.findAll();

Here, findAll() retrieves all records from the Product table without writing any SQL code.
Behind the Scenes: While you don't write SQL queries, Spring Data JPA generates them dynamically based on method names and annotations. This approach streamlines database interactions and reduces the amount of boilerplate code.


application.properties in resources folder should be updated for db connection

Error creating bean with name 'productDB' defined in com.afreen.ProjectSpring.ProductDB defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar
Repository Annotation:

When working with a database in Spring, the class that interacts with the database should be annotated as a repository. This helps Spring to identify it as a component responsible for data access.
Example: Annotate the class ProductDB with @Repository to indicate that it is a repository component.
Component vs. Repository:

Although both @Component and @Repository can be used to register a class as a Spring Bean, @Repository is specifically used for classes that access the database. This distinction can help with exception translation and other data access concerns.
Dependency Injection with @Autowired:

Simply marking a class with @Repository or @Component does not automatically make Spring inject it wherever needed. To inject this dependency into another class (e.g., ProductService), you need to use the @Autowired annotation.
The @Autowired annotation tells Spring that you want an instance of the repository (e.g., ProductDB) injected into your service class.

Main Application Class (ProjectSpringApplication):
Change: Modified the main method to use Spring’s ApplicationContext to get the ProductService bean.
Reason: This ensures that Spring’s dependency injection is properly applied, allowing the ProductDB instance to be injected into ProductService.
ApplicationContext context = SpringApplication.run(ProjectSpringApplication.class, args);
ProductService service = context.getBean(ProductService.class);


Product Entity Class (Product):
Change: Added the @Table(name = "products") annotation to specify the correct table name.
Reason: The default table name derived from the entity class name (product) did not match the actual table name in the database (products).
@Entity
@Table(name = "products")
public class Product 
Table name in PostgreDB was products but my class name in spring was product, so mismatch

Change: Added the @Column(name = "color") annotation to map the colour field to the correct column name in the database.
Reason: The column name in the database was color, not colour, causing a mismatch.
@Column(name = "color")
private String colour;
